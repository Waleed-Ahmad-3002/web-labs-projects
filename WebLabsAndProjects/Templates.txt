/*
WEB DEVELOPMENT TEMPLATES
=========================
This file contains code templates for common web development tasks and projects.
Each section includes commented code with explanations to help understand the implementation.
*/

/*===========================================================================
1. SIMPLE FULL-STACK CRUD APPLICATION (MERN STACK)
===========================================================================*/

/* --- REACT+VITE FRONTEND --- */
// File: client/src/App.jsx
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Navbar from './components/Navbar';
import PostList from './components/PostList';
import PostForm from './components/PostForm';
import PostEdit from './components/PostEdit';
import './App.css';

function App() {
  return (
    <BrowserRouter>
      <div className="app">
        <Navbar />
        <div className="container">
          <Routes>
            <Route path="/" element={<PostList />} />
            <Route path="/create" element={<PostForm />} />
            <Route path="/edit/:id" element={<PostEdit />} />
          </Routes>
        </div>
      </div>
    </BrowserRouter>
  );
}

export default App;

// File: client/src/components/PostList.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';

function PostList() {
  const [posts, setPosts] = useState([]);

  // Fetch all posts when component mounts
  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const res = await axios.get('/api/posts');
        setPosts(res.data);
      } catch (err) {
        console.error('Error fetching posts:', err);
      }
    };
    fetchPosts();
  }, []);

  // Delete post function
  const deletePost = async (id) => {
    try {
      await axios.delete(`/api/posts/${id}`);
      setPosts(posts.filter(post => post._id !== id));
    } catch (err) {
      console.error('Error deleting post:', err);
    }
  };

  return (
    <div className="post-list">
      <h2>Blog Posts</h2>
      <Link to="/create" className="btn-create">Create New Post</Link>

      {posts.length === 0 ? (
        <p>No posts found</p>
      ) : (
        posts.map(post => (
          <div key={post._id} className="post-card">
            <h3>{post.title}</h3>
            <p>{post.content.substring(0, 100)}...</p>
            <div className="post-actions">
              <Link to={`/edit/${post._id}`} className="btn-edit">Edit</Link>
              <button
                onClick={() => deletePost(post._id)}
                className="btn-delete"
              >
                Delete
              </button>
            </div>
          </div>
        ))
      )}
    </div>
  );
}

export default PostList;

/* --- NODE.JS/EXPRESS/MONGODB BACKEND --- */
// File: server.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

// Post model
const postSchema = new mongoose.Schema({
  title: { type: String, required: true },
  content: { type: String, required: true },
  createdAt: { type: Date, default: Date.now }
});

const Post = mongoose.model('Post', postSchema);

// Routes
// GET all posts
app.get('/api/posts', async (req, res) => {
  try {
    const posts = await Post.find().sort({ createdAt: -1 });
    res.json(posts);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// GET single post
app.get('/api/posts/:id', async (req, res) => {
  try {
    const post = await Post.findById(req.params.id);
    if (!post) return res.status(404).json({ message: 'Post not found' });
    res.json(post);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// CREATE post
app.post('/api/posts', async (req, res) => {
  try {
    const newPost = new Post({
      title: req.body.title,
      content: req.body.content
    });
    const savedPost = await newPost.save();
    res.status(201).json(savedPost);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// UPDATE post
app.put('/api/posts/:id', async (req, res) => {
  try {
    const updatedPost = await Post.findByIdAndUpdate(
      req.params.id,
      { title: req.body.title, content: req.body.content },
      { new: true }
    );
    if (!updatedPost) return res.status(404).json({ message: 'Post not found' });
    res.json(updatedPost);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// DELETE post
app.delete('/api/posts/:id', async (req, res) => {
  try {
    const deletedPost = await Post.findByIdAndDelete(req.params.id);
    if (!deletedPost) return res.status(404).json({ message: 'Post not found' });
    res.json({ message: 'Post deleted' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

/*===========================================================================
2. TO-DO LIST
===========================================================================*/

/* --- REACT VERSION --- */
// File: TodoApp.jsx
import React, { useState, useEffect } from 'react';
import './TodoApp.css';

function TodoApp() {
  const [todos, setTodos] = useState(() => {
    // Load todos from localStorage on initial render
    const savedTodos = localStorage.getItem('todos');
    return savedTodos ? JSON.parse(savedTodos) : [];
  });
  const [input, setInput] = useState('');

  // Save todos to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('todos', JSON.stringify(todos));
  }, [todos]);

  // Add new todo
  const addTodo = (e) => {
    e.preventDefault();
    if (input.trim() === '') return;

    const newTodo = {
      id: Date.now(),
      text: input,
      completed: false
    };

    setTodos([...todos, newTodo]);
    setInput('');
  };

  // Toggle todo completion status
  const toggleComplete = (id) => {
    setTodos(
      todos.map(todo =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      )
    );
  };

  // Delete todo
  const deleteTodo = (id) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  return (
    <div className="todo-app">
      <h1>Todo List</h1>

      <form onSubmit={addTodo}>
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Add a new task..."
        />
        <button type="submit">Add</button>
      </form>

      <ul className="todo-list">
        {todos.length === 0 ? (
          <li className="empty-message">No tasks yet! Add one above.</li>
        ) : (
          todos.map(todo => (
            <li key={todo.id} className={todo.completed ? 'completed' : ''}>
              <span onClick={() => toggleComplete(todo.id)}>
                {todo.text}
              </span>
              <button onClick={() => deleteTodo(todo.id)}>Delete</button>
            </li>
          ))
        )}
      </ul>
    </div>
  );
}

export default TodoApp;

/* --- REACT+VITE VERSION --- */
// File: TodoApp.jsx (React+Vite)
// This is similar to the React version but with Vite-specific setup
import React, { useState, useEffect } from 'react';
import './TodoApp.css';

function TodoApp() {
  const [todos, setTodos] = useState(() => {
    const savedTodos = localStorage.getItem('todos');
    return savedTodos ? JSON.parse(savedTodos) : [];
  });
  const [input, setInput] = useState('');

  useEffect(() => {
    localStorage.setItem('todos', JSON.stringify(todos));
  }, [todos]);

  const addTodo = (e) => {
    e.preventDefault();
    if (input.trim() === '') return;

    const newTodo = {
      id: crypto.randomUUID(), // Using modern API available in Vite
      text: input,
      completed: false
    };

    setTodos([...todos, newTodo]);
    setInput('');
  };

  const toggleComplete = (id) => {
    setTodos(
      todos.map(todo =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      )
    );
  };

  const deleteTodo = (id) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  return (
    <div className="todo-app">
      <h1>Todo List</h1>

      <form onSubmit={addTodo}>
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Add a new task..."
        />
        <button type="submit">Add</button>
      </form>

      <ul className="todo-list">
        {todos.length === 0 ? (
          <li className="empty-message">No tasks yet! Add one above.</li>
        ) : (
          todos.map(todo => (
            <li key={todo.id} className={todo.completed ? 'completed' : ''}>
              <span onClick={() => toggleComplete(todo.id)}>
                {todo.text}
              </span>
              <button onClick={() => deleteTodo(todo.id)}>Delete</button>
            </li>
          ))
        )}
      </ul>
    </div>
  );
}

export default TodoApp;

/* --- VANILLA JAVASCRIPT VERSION --- */
// File: todo.js
// HTML structure needed:
// <div id="todo-app">
//   <h1>Todo List</h1>
//   <form id="todo-form">
//     <input type="text" id="todo-input" placeholder="Add a new task...">
//     <button type="submit">Add</button>
//   </form>
//   <ul id="todo-list"></ul>
// </div>

document.addEventListener('DOMContentLoaded', () => {
  // DOM elements
  const todoForm = document.getElementById('todo-form');
  const todoInput = document.getElementById('todo-input');
  const todoList = document.getElementById('todo-list');

  // Load todos from localStorage
  let todos = JSON.parse(localStorage.getItem('todos')) || [];

  // Render todos
  function renderTodos() {
    todoList.innerHTML = '';

    if (todos.length === 0) {
      const emptyMessage = document.createElement('li');
      emptyMessage.textContent = 'No tasks yet! Add one above.';
      emptyMessage.className = 'empty-message';
      todoList.appendChild(emptyMessage);
      return;
    }

    todos.forEach(todo => {
      const li = document.createElement('li');
      if (todo.completed) li.classList.add('completed');

      const span = document.createElement('span');
      span.textContent = todo.text;
      span.addEventListener('click', () => toggleComplete(todo.id));

      const deleteBtn = document.createElement('button');
      deleteBtn.textContent = 'Delete';
      deleteBtn.addEventListener('click', () => deleteTodo(todo.id));

      li.appendChild(span);
      li.appendChild(deleteBtn);
      todoList.appendChild(li);
    });
  }

  // Add new todo
  function addTodo(e) {
    e.preventDefault();
    const text = todoInput.value.trim();
    if (text === '') return;

    const newTodo = {
      id: Date.now(),
      text,
      completed: false
    };

    todos.push(newTodo);
    localStorage.setItem('todos', JSON.stringify(todos));
    todoInput.value = '';
    renderTodos();
  }

  // Toggle todo completion status
  function toggleComplete(id) {
    todos = todos.map(todo =>
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    );
    localStorage.setItem('todos', JSON.stringify(todos));
    renderTodos();
  }

  // Delete todo
  function deleteTodo(id) {
    todos = todos.filter(todo => todo.id !== id);
    localStorage.setItem('todos', JSON.stringify(todos));
    renderTodos();
  }

  // Event listeners
  todoForm.addEventListener('submit', addTodo);

  // Initial render
  renderTodos();
});

/*===========================================================================
3. RESPONSIVE NAVIGATION BAR (HTML/CSS/JS)
===========================================================================*/

/* --- HTML (navbar.html) --- */
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Responsive Navbar</title>
  <link rel="stylesheet" href="navbar.css">
  <!-- Font Awesome for hamburger icon -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
  <nav class="navbar">
    <div class="logo">
      <a href="#">Brand Logo</a>
    </div>

    <ul class="nav-links">
      <li><a href="#" class="active">Home</a></li>
      <li><a href="#">About</a></li>
      <li><a href="#">Services</a></li>
      <li><a href="#">Portfolio</a></li>
      <li><a href="#">Contact</a></li>
    </ul>

    <div class="hamburger">
      <i class="fas fa-bars"></i>
    </div>
  </nav>

  <script src="navbar.js"></script>
</body>
</html>

/* --- CSS (navbar.css) --- */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Arial', sans-serif;
}

.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #333;
  color: white;
  padding: 1rem 2rem;
}

.logo a {
  color: white;
  text-decoration: none;
  font-size: 1.5rem;
  font-weight: bold;
}

.nav-links {
  display: flex;
  list-style: none;
}

.nav-links li {
  margin-left: 1.5rem;
}

.nav-links a {
  color: white;
  text-decoration: none;
  transition: color 0.3s ease;
}

.nav-links a:hover,
.nav-links a.active {
  color: #f8c630;
}

.hamburger {
  display: none;
  cursor: pointer;
  font-size: 1.5rem;
}

/* Media query for responsive design */
@media screen and (max-width: 768px) {
  .nav-links {
    position: fixed;
    top: 0;
    right: -100%;
    width: 60%;
    height: 100vh;
    background-color: #333;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    transition: right 0.5s ease;
    z-index: 10;
  }

  .nav-links.active {
    right: 0;
  }

  .nav-links li {
    margin: 1.5rem 0;
  }

  .hamburger {
    display: block;
    z-index: 20;
  }
}

/* --- JavaScript (navbar.js) --- */
document.addEventListener('DOMContentLoaded', () => {
  const hamburger = document.querySelector('.hamburger');
  const navLinks = document.querySelector('.nav-links');

  // Toggle navigation menu
  hamburger.addEventListener('click', () => {
    navLinks.classList.toggle('active');

    // Change hamburger icon to X when menu is open
    const icon = hamburger.querySelector('i');
    if (navLinks.classList.contains('active')) {
      icon.classList.remove('fa-bars');
      icon.classList.add('fa-times');
    } else {
      icon.classList.remove('fa-times');
      icon.classList.add('fa-bars');
    }
  });

  // Close menu when clicking outside
  document.addEventListener('click', (e) => {
    if (!hamburger.contains(e.target) && !navLinks.contains(e.target) && navLinks.classList.contains('active')) {
      navLinks.classList.remove('active');
      const icon = hamburger.querySelector('i');
      icon.classList.remove('fa-times');
      icon.classList.add('fa-bars');
    }
  });
});

/*===========================================================================
4. HTML FORM CREATION WITH VALIDATION (HTML/CSS/JS)
===========================================================================*/

/* --- HTML (form.html) --- */
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Form Validation</title>
  <link rel="stylesheet" href="form.css">
</head>
<body>
  <div class="form-container">
    <h2>Registration Form</h2>
    <form id="registration-form" novalidate>
      <div class="form-group">
        <label for="username">Username</label>
        <input type="text" id="username" name="username" required>
        <small class="error-message"></small>
      </div>

      <div class="form-group">
        <label for="email">Email</label>
        <input type="email" id="email" name="email" required>
        <small class="error-message"></small>
      </div>

      <div class="form-group">
        <label for="password">Password</label>
        <input type="password" id="password" name="password" required>
        <small class="error-message"></small>
      </div>

      <div class="form-group">
        <label for="confirm-password">Confirm Password</label>
        <input type="password" id="confirm-password" name="confirmPassword" required>
        <small class="error-message"></small>
      </div>

      <button type="submit">Register</button>
    </form>
  </div>

  <script src="form.js"></script>
</body>
</html>

/* --- CSS (form.css) --- */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Arial', sans-serif;
  background-color: #f5f5f5;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  padding: 20px;
}

.form-container {
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 500px;
  padding: 30px;
}

h2 {
  text-align: center;
  margin-bottom: 30px;
  color: #333;
}

.form-group {
  margin-bottom: 20px;
}

label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #555;
}

input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 16px;
}

input:focus {
  outline: none;
  border-color: #4d90fe;
  box-shadow: 0 0 5px rgba(77, 144, 254, 0.2);
}

.error-message {
  color: #e74c3c;
  font-size: 14px;
  margin-top: 5px;
  display: block;
}

button {
  width: 100%;
  padding: 12px;
  background-color: #4285f4;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #3367d6;
}

input.error {
  border-color: #e74c3c;
}

/* --- JavaScript (form.js) --- */
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('registration-form');
  const username = document.getElementById('username');
  const email = document.getElementById('email');
  const password = document.getElementById('password');
  const confirmPassword = document.getElementById('confirm-password');

  // Show error message
  function showError(input, message) {
    const formGroup = input.parentElement;
    const errorMessage = formGroup.querySelector('.error-message');
    input.classList.add('error');
    errorMessage.textContent = message;
  }

  // Show success
  function showSuccess(input) {
    const formGroup = input.parentElement;
    const errorMessage = formGroup.querySelector('.error-message');
    input.classList.remove('error');
    errorMessage.textContent = '';
  }

  // Check if email is valid
  function isValidEmail(email) {
    const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
  }

  // Check required fields
  function checkRequired(inputArr) {
    let isValid = true;
    inputArr.forEach(input => {
      if (input.value.trim() === '') {
        showError(input, `${input.id.charAt(0).toUpperCase() + input.id.slice(1)} is required`);
        isValid = false;
      } else {
        showSuccess(input);
      }
    });
    return isValid;
  }

  // Check input length
  function checkLength(input, min, max) {
    if (input.value.length < min) {
      showError(input, `${input.id.charAt(0).toUpperCase() + input.id.slice(1)} must be at least ${min} characters`);
      return false;
    } else if (input.value.length > max) {
      showError(input, `${input.id.charAt(0).toUpperCase() + input.id.slice(1)} must be less than ${max} characters`);
      return false;
    } else {
      showSuccess(input);
      return true;
    }
  }

  // Check passwords match
  function checkPasswordsMatch(password1, password2) {
    if (password1.value !== password2.value) {
      showError(password2, 'Passwords do not match');
      return false;
    }
    return true;
  }

  // Event listeners
  form.addEventListener('submit', function(e) {
    e.preventDefault();

    // Validate form
    const isRequiredValid = checkRequired([username, email, password, confirmPassword]);
    const isUsernameValid = isRequiredValid ? checkLength(username, 3, 15) : false;
    const isPasswordValid = isRequiredValid ? checkLength(password, 6, 25) : false;
    const isEmailValid = isRequiredValid ? isValidEmail(email.value) : false;
    const isPasswordMatch = isRequiredValid ? checkPasswordsMatch(password, confirmPassword) : false;

    if (!isEmailValid && email.value.trim() !== '') {
      showError(email, 'Email is not valid');
    }

    // If all validations pass
    if (isRequiredValid && isUsernameValid && isPasswordValid && isEmailValid && isPasswordMatch) {
      // Form is valid, you can submit it
      alert('Registration successful!');
      form.reset();
    }
  });
});

/*===========================================================================
5. STATIC PAGE / LANDING PAGE LAYOUT (HTML/CSS) + MERN
===========================================================================*/

/* --- HTML (index.html) --- */
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Modern Landing Page</title>
  <link rel="stylesheet" href="styles.css">
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
  <!-- Header Section -->
  <header>
    <nav>
      <div class="logo">
        <a href="#">CompanyName</a>
      </div>
      <ul class="nav-links">
        <li><a href="#home">Home</a></li>
        <li><a href="#features">Features</a></li>
        <li><a href="#about">About</a></li>
        <li><a href="#testimonials">Testimonials</a></li>
        <li><a href="#contact">Contact</a></li>
      </ul>
      <div class="hamburger">
        <i class="fas fa-bars"></i>
      </div>
    </nav>
  </header>

  <!-- Hero Section -->
  <section id="home" class="hero">
    <div class="hero-content">
      <h1>Welcome to Our Platform</h1>
      <p>The most innovative solution for your business needs</p>
      <div class="cta-buttons">
        <a href="#" class="btn btn-primary">Get Started</a>
        <a href="#" class="btn btn-secondary">Learn More</a>
      </div>
    </div>
    <div class="hero-image">
      <img src="https://via.placeholder.com/600x400" alt="Hero Image">
    </div>
  </section>

  <!-- Features Section -->
  <section id="features" class="features">
    <div class="section-header">
      <h2>Our Features</h2>
      <p>Discover what makes our platform stand out</p>
    </div>
    <div class="feature-cards">
      <div class="feature-card">
        <i class="fas fa-rocket"></i>
        <h3>Fast Performance</h3>
        <p>Lightning-fast loading times and smooth user experience.</p>
      </div>
      <div class="feature-card">
        <i class="fas fa-shield-alt"></i>
        <h3>Secure & Reliable</h3>
        <p>Your data is protected with enterprise-grade security.</p>
      </div>
      <div class="feature-card">
        <i class="fas fa-cogs"></i>
        <h3>Customizable</h3>
        <p>Tailor the platform to meet your specific requirements.</p>
      </div>
    </div>
  </section>

  <!-- Footer -->
  <footer>
    <div class="footer-content">
      <div class="footer-logo">
        <h3>CompanyName</h3>
        <p>Making the world a better place through technology.</p>
      </div>
      <div class="footer-links">
        <h4>Quick Links</h4>
        <ul>
          <li><a href="#home">Home</a></li>
          <li><a href="#features">Features</a></li>
          <li><a href="#about">About</a></li>
          <li><a href="#contact">Contact</a></li>
        </ul>
      </div>
      <div class="footer-contact">
        <h4>Contact Us</h4>
        <p><i class="fas fa-envelope"></i> info@company.com</p>
        <p><i class="fas fa-phone"></i> (123) 456-7890</p>
        <div class="social-icons">
          <a href="#"><i class="fab fa-facebook"></i></a>
          <a href="#"><i class="fab fa-twitter"></i></a>
          <a href="#"><i class="fab fa-instagram"></i></a>
          <a href="#"><i class="fab fa-linkedin"></i></a>
        </div>
      </div>
    </div>
    <div class="footer-bottom">
      <p>&copy; 2023 CompanyName. All rights reserved.</p>
    </div>
  </footer>

  <script src="script.js"></script>
</body>
</html>

/* --- CSS (styles.css) --- */
/* Base styles and reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Arial', sans-serif;
  line-height: 1.6;
  color: #333;
}

a {
  text-decoration: none;
  color: inherit;
}

ul {
  list-style: none;
}

/* Header and Navigation */
header {
  background-color: #fff;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 0;
  z-index: 100;
}

nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 5%;
  max-width: 1200px;
  margin: 0 auto;
}

.logo a {
  font-size: 1.5rem;
  font-weight: bold;
  color: #4285f4;
}

.nav-links {
  display: flex;
}

.nav-links li {
  margin-left: 2rem;
}

.nav-links a {
  color: #555;
  font-weight: 500;
  transition: color 0.3s;
}

.nav-links a:hover {
  color: #4285f4;
}

.hamburger {
  display: none;
  cursor: pointer;
  font-size: 1.5rem;
}

/* Hero Section */
.hero {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 5rem 5%;
  max-width: 1200px;
  margin: 0 auto;
}

.hero-content {
  flex: 1;
  padding-right: 2rem;
}

.hero-content h1 {
  font-size: 2.5rem;
  margin-bottom: 1rem;
  color: #333;
}

.hero-content p {
  font-size: 1.2rem;
  color: #666;
  margin-bottom: 2rem;
}

.hero-image {
  flex: 1;
}

.hero-image img {
  max-width: 100%;
  border-radius: 8px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

/* Buttons */
.btn {
  display: inline-block;
  padding: 0.8rem 1.5rem;
  border-radius: 4px;
  font-weight: bold;
  transition: all 0.3s;
  margin-right: 1rem;
}

.btn-primary {
  background-color: #4285f4;
  color: white;
}

.btn-primary:hover {
  background-color: #3367d6;
  transform: translateY(-2px);
}

.btn-secondary {
  background-color: transparent;
  color: #4285f4;
  border: 2px solid #4285f4;
}

.btn-secondary:hover {
  background-color: rgba(66, 133, 244, 0.1);
  transform: translateY(-2px);
}

/* Features Section */
.features {
  background-color: #f9f9f9;
  padding: 5rem 5%;
}

.section-header {
  text-align: center;
  margin-bottom: 3rem;
}

.section-header h2 {
  font-size: 2rem;
  color: #333;
  margin-bottom: 1rem;
}

.section-header p {
  color: #666;
  max-width: 600px;
  margin: 0 auto;
}

.feature-cards {
  display: flex;
  justify-content: space-between;
  max-width: 1200px;
  margin: 0 auto;
  flex-wrap: wrap;
}

.feature-card {
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
  padding: 2rem;
  flex: 1;
  min-width: 300px;
  margin: 1rem;
  text-align: center;
  transition: transform 0.3s;
}

.feature-card:hover {
  transform: translateY(-10px);
}

.feature-card i {
  font-size: 2.5rem;
  color: #4285f4;
  margin-bottom: 1.5rem;
}

.feature-card h3 {
  margin-bottom: 1rem;
  color: #333;
}

.feature-card p {
  color: #666;
}

/* Footer */
footer {
  background-color: #333;
  color: white;
  padding: 3rem 5% 1rem;
}

.footer-content {
  display: flex;
  justify-content: space-between;
  max-width: 1200px;
  margin: 0 auto;
  flex-wrap: wrap;
}

.footer-logo, .footer-links, .footer-contact {
  flex: 1;
  min-width: 250px;
  margin-bottom: 2rem;
}

.footer-logo h3 {
  font-size: 1.5rem;
  margin-bottom: 1rem;
}

.footer-links h4, .footer-contact h4 {
  margin-bottom: 1rem;
  font-size: 1.2rem;
}

.footer-links ul li {
  margin-bottom: 0.5rem;
}

.footer-links a {
  color: #ddd;
  transition: color 0.3s;
}

.footer-links a:hover {
  color: #4285f4;
}

.footer-contact p {
  margin-bottom: 0.5rem;
}

.footer-contact i {
  margin-right: 0.5rem;
}

.social-icons {
  margin-top: 1rem;
}

.social-icons a {
  display: inline-block;
  margin-right: 1rem;
  font-size: 1.2rem;
  transition: color 0.3s;
}

.social-icons a:hover {
  color: #4285f4;
}

.footer-bottom {
  text-align: center;
  padding-top: 2rem;
  border-top: 1px solid #444;
  margin-top: 2rem;
}

/* Responsive Design */
@media screen and (max-width: 768px) {
  .nav-links {
    position: fixed;
    top: 0;
    right: -100%;
    width: 70%;
    height: 100vh;
    background-color: white;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    transition: right 0.5s ease;
    z-index: 10;
    box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);
  }

  .nav-links.active {
    right: 0;
  }

  .nav-links li {
    margin: 1.5rem 0;
  }

  .hamburger {
    display: block;
    z-index: 20;
  }

  .hero {
    flex-direction: column;
    text-align: center;
  }

  .hero-content {
    padding-right: 0;
    margin-bottom: 2rem;
  }

  .feature-card {
    min-width: 100%;
  }
}

/*===========================================================================
6. CLIENT-SIDE ROUTING IN REACT (REACT ROUTER)
===========================================================================*/

/* --- REACT ROUTER SETUP --- */
// File: App.jsx
import React from 'react';
import { BrowserRouter, Routes, Route, Link, NavLink } from 'react-router-dom';
import Home from './pages/Home';
import About from './pages/About';
import Contact from './pages/Contact';
import NotFound from './pages/NotFound';
import './App.css';

function App() {
  return (
    <BrowserRouter>
      <div className="app">
        <header>
          <nav>
            <div className="logo">
              <Link to="/">My React App</Link>
            </div>
            <ul className="nav-links">
              {/* NavLink adds 'active' class when route matches */}
              <li><NavLink to="/" end>Home</NavLink></li>
              <li><NavLink to="/about">About</NavLink></li>
              <li><NavLink to="/contact">Contact</NavLink></li>
            </ul>
          </nav>
        </header>

        <main>
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/about" element={<About />} />
            <Route path="/contact" element={<Contact />} />
            {/* 404 route - must be last */}
            <Route path="*" element={<NotFound />} />
          </Routes>
        </main>

        <footer>
          <p>&copy; {new Date().getFullYear()} My React App</p>
        </footer>
      </div>
    </BrowserRouter>
  );
}

export default App;

// File: pages/Home.jsx
import React from 'react';
import { Link } from 'react-router-dom';

function Home() {
  return (
    <div className="page home-page">
      <h1>Welcome to Our Website</h1>
      <p>This is the home page of our React application with routing.</p>
      <div className="cta-buttons">
        <Link to="/about" className="btn">Learn About Us</Link>
        <Link to="/contact" className="btn">Get in Touch</Link>
      </div>
    </div>
  );
}

export default Home;

// File: pages/About.jsx
import React from 'react';

function About() {
  return (
    <div className="page about-page">
      <h1>About Us</h1>
      <p>We are a company dedicated to creating amazing web applications using React.</p>
      <p>Our team consists of passionate developers who love what they do.</p>
    </div>
  );
}

export default About;

// File: pages/Contact.jsx
import React, { useState } from 'react';

function Contact() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: ''
  });
  const [submitted, setSubmitted] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // In a real app, you would send this data to a server
    console.log('Form submitted:', formData);
    setSubmitted(true);
  };

  if (submitted) {
    return (
      <div className="page contact-page">
        <h1>Thank You!</h1>
        <p>Your message has been received. We'll get back to you soon.</p>
      </div>
    );
  }

  return (
    <div className="page contact-page">
      <h1>Contact Us</h1>
      <form onSubmit={handleSubmit} className="contact-form">
        <div className="form-group">
          <label htmlFor="name">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
          />
        </div>

        <div className="form-group">
          <label htmlFor="email">Email</label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            required
          />
        </div>

        <div className="form-group">
          <label htmlFor="message">Message</label>
          <textarea
            id="message"
            name="message"
            value={formData.message}
            onChange={handleChange}
            rows="5"
            required
          ></textarea>
        </div>

        <button type="submit" className="btn">Send Message</button>
      </form>
    </div>
  );
}

export default Contact;

// File: pages/NotFound.jsx
import React from 'react';
import { Link } from 'react-router-dom';

function NotFound() {
  return (
    <div className="page not-found-page">
      <h1>404 - Page Not Found</h1>
      <p>The page you are looking for does not exist.</p>
      <Link to="/" className="btn">Go Home</Link>
    </div>
  );
}

export default NotFound;

/*===========================================================================
7. RESTFUL API ENDPOINTS (NODE.JS/EXPRESS)
===========================================================================*/

/* --- EXPRESS SERVER SETUP --- */
// File: server.js
const express = require('express');
const cors = require('cors');
const morgan = require('morgan');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(morgan('dev')); // Logging middleware

// Routes
app.use('/api/users', require('./routes/users'));
app.use('/api/products', require('./routes/products'));

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: 'Server Error' });
});

// Start server
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

// File: routes/users.js
const express = require('express');
const router = express.Router();
const { check, validationResult } = require('express-validator');

// Sample data (in a real app, this would come from a database)
let users = [
  { id: 1, name: 'John Doe', email: 'john@example.com' },
  { id: 2, name: 'Jane Smith', email: 'jane@example.com' }
];

/**
 * @route   GET /api/users
 * @desc    Get all users
 * @access  Public
 */
router.get('/', (req, res) => {
  res.json(users);
});

/**
 * @route   GET /api/users/:id
 * @desc    Get user by ID
 * @access  Public
 */
router.get('/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const user = users.find(user => user.id === id);

  if (!user) {
    return res.status(404).json({ message: 'User not found' });
  }

  res.json(user);
});

/**
 * @route   POST /api/users
 * @desc    Create a new user
 * @access  Public
 */
router.post(
  '/',
  [
    check('name', 'Name is required').not().isEmpty(),
    check('email', 'Please include a valid email').isEmail()
  ],
  (req, res) => {
    // Validate request
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { name, email } = req.body;

    // Check if email already exists
    if (users.some(user => user.email === email)) {
      return res.status(400).json({ message: 'User with this email already exists' });
    }

    // Create new user
    const newUser = {
      id: users.length > 0 ? Math.max(...users.map(user => user.id)) + 1 : 1,
      name,
      email
    };

    users.push(newUser);
    res.status(201).json(newUser);
  }
);

/**
 * @route   PUT /api/users/:id
 * @desc    Update a user
 * @access  Public
 */
router.put('/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const { name, email } = req.body;

  // Find user index
  const index = users.findIndex(user => user.id === id);

  if (index === -1) {
    return res.status(404).json({ message: 'User not found' });
  }

  // Update user
  const updatedUser = {
    ...users[index],
    name: name || users[index].name,
    email: email || users[index].email
  };

  users[index] = updatedUser;
  res.json(updatedUser);
});

/**
 * @route   DELETE /api/users/:id
 * @desc    Delete a user
 * @access  Public
 */
router.delete('/:id', (req, res) => {
  const id = parseInt(req.params.id);

  // Check if user exists
  if (!users.some(user => user.id === id)) {
    return res.status(404).json({ message: 'User not found' });
  }

  // Remove user
  users = users.filter(user => user.id !== id);
  res.json({ message: 'User removed' });
});

module.exports = router;

/*===========================================================================
8. DATABASE INTEGRATION WITH MONGODB (MONGOOSE)
===========================================================================*/

/* --- LOCAL MONGODB SETUP --- */
// File: db.js (Local MongoDB)
const mongoose = require('mongoose');
require('dotenv').config();

// Local MongoDB connection string
const localDB = 'mongodb://localhost:27017/myapp';

const connectDB = async () => {
  try {
    await mongoose.connect(localDB, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB Connected...');
  } catch (err) {
    console.error('MongoDB connection error:', err.message);
    // Exit process with failure
    process.exit(1);
  }
};

module.exports = connectDB;

// File: models/User.js
const mongoose = require('mongoose');

// Define schema
const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Name is required'],
    trim: true
  },
  email: {
    type: String,
    required: [true, 'Email is required'],
    unique: true,
    trim: true,
    lowercase: true,
    match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, 'Please provide a valid email']
  },
  password: {
    type: String,
    required: [true, 'Password is required'],
    minlength: [6, 'Password must be at least 6 characters']
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

// Create model
const User = mongoose.model('User', userSchema);

module.exports = User;

/* --- MONGODB ATLAS SETUP --- */
// File: db.js (MongoDB Atlas)
const mongoose = require('mongoose');
require('dotenv').config();

// MongoDB Atlas connection string (stored in .env file)
const atlasURI = process.env.MONGO_URI;

const connectDB = async () => {
  try {
    await mongoose.connect(atlasURI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB Atlas Connected...');
  } catch (err) {
    console.error('MongoDB Atlas connection error:', err.message);
    // Exit process with failure
    process.exit(1);
  }
};

module.exports = connectDB;

// Example .env file
// MONGO_URI=mongodb+srv://username:password@cluster0.mongodb.net/myapp?retryWrites=true&w=majority

// File: controllers/userController.js
const User = require('../models/User');
const bcrypt = require('bcryptjs');

// Get all users
exports.getUsers = async (req, res) => {
  try {
    const users = await User.find().select('-password');
    res.json(users);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server Error');
  }
};

// Get user by ID
exports.getUserById = async (req, res) => {
  try {
    const user = await User.findById(req.params.id).select('-password');

    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.json(user);
  } catch (err) {
    console.error(err.message);
    if (err.kind === 'ObjectId') {
      return res.status(404).json({ message: 'User not found' });
    }
    res.status(500).send('Server Error');
  }
};

// Create user
exports.createUser = async (req, res) => {
  const { name, email, password } = req.body;

  try {
    // Check if user already exists
    let user = await User.findOne({ email });
    if (user) {
      return res.status(400).json({ message: 'User already exists' });
    }

    // Create new user
    user = new User({
      name,
      email,
      password
    });

    // Hash password
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(password, salt);

    // Save user to database
    await user.save();

    // Return user without password
    const userResponse = await User.findById(user._id).select('-password');
    res.status(201).json(userResponse);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server Error');
  }
};

/*===========================================================================
9. INTERACTIVE JAVASCRIPT WIDGET (QUIZ)
===========================================================================*/

/* --- QUIZ APP --- */
// File: quiz.js
document.addEventListener('DOMContentLoaded', () => {
  // DOM elements
  const quizContainer = document.getElementById('quiz-container');
  const questionContainer = document.getElementById('question-container');
  const optionsContainer = document.getElementById('options-container');
  const resultContainer = document.getElementById('result-container');
  const nextButton = document.getElementById('next-button');
  const restartButton = document.getElementById('restart-button');

  // Quiz state
  let currentQuestionIndex = 0;
  let score = 0;

  // Quiz questions
  const questions = [
    {
      question: 'What does HTML stand for?',
      options: [
        'Hyper Text Markup Language',
        'Hyper Transfer Markup Language',
        'Hyper Text Modern Language',
        'Hyper Tool Multi Language'
      ],
      correctAnswer: 0
    },
    {
      question: 'Which of the following is a JavaScript framework?',
      options: [
        'Django',
        'Flask',
        'React',
        'Laravel'
      ],
      correctAnswer: 2
    },
    {
      question: 'Which CSS property is used to change the text color?',
      options: [
        'text-color',
        'color',
        'font-color',
        'text-style'
      ],
      correctAnswer: 1
    },
    {
      question: 'What does API stand for?',
      options: [
        'Application Programming Interface',
        'Application Process Integration',
        'Advanced Programming Interface',
        'Application Protocol Interface'
      ],
      correctAnswer: 0
    },
    {
      question: 'Which of these is NOT a JavaScript data type?',
      options: [
        'String',
        'Boolean',
        'Float',
        'Object'
      ],
      correctAnswer: 2
    }
  ];

  // Initialize quiz
  function startQuiz() {
    currentQuestionIndex = 0;
    score = 0;
    nextButton.innerHTML = 'Next';
    showQuestion();
  }

  // Display current question
  function showQuestion() {
    resetState();
    const currentQuestion = questions[currentQuestionIndex];
    const questionNumber = currentQuestionIndex + 1;

    questionContainer.innerHTML = `<p>${questionNumber}/${questions.length}: ${currentQuestion.question}</p>`;

    currentQuestion.options.forEach((option, index) => {
      const button = document.createElement('button');
      button.innerHTML = option;
      button.classList.add('option-button');
      button.addEventListener('click', () => selectAnswer(index));
      optionsContainer.appendChild(button);
    });
  }

  // Reset UI state
  function resetState() {
    nextButton.style.display = 'none';
    while (optionsContainer.firstChild) {
      optionsContainer.removeChild(optionsContainer.firstChild);
    }
    resultContainer.innerHTML = '';
  }

  // Handle answer selection
  function selectAnswer(index) {
    const currentQuestion = questions[currentQuestionIndex];
    const optionButtons = document.querySelectorAll('.option-button');

    // Disable all buttons after selection
    optionButtons.forEach(button => {
      button.disabled = true;
    });

    // Highlight correct and incorrect answers
    optionButtons.forEach((button, buttonIndex) => {
      if (buttonIndex === currentQuestion.correctAnswer) {
        button.classList.add('correct');
      } else if (buttonIndex === index) {
        button.classList.add('incorrect');
      }
    });

    // Update score if correct
    if (index === currentQuestion.correctAnswer) {
      score++;
      resultContainer.innerHTML = '<p class="correct-message">Correct!</p>';
    } else {
      resultContainer.innerHTML = '<p class="incorrect-message">Incorrect!</p>';
    }

    nextButton.style.display = 'block';
  }

  // Handle next button click
  function handleNextButton() {
    currentQuestionIndex++;

    if (currentQuestionIndex < questions.length) {
      showQuestion();
    } else {
      showScore();
    }
  }

  // Show final score
  function showScore() {
    resetState();
    questionContainer.innerHTML = `<h2>Your score: ${score}/${questions.length}</h2>`;

    // Display different messages based on score
    let message = '';
    const percentage = (score / questions.length) * 100;

    if (percentage >= 80) {
      message = 'Excellent! You really know your stuff!';
    } else if (percentage >= 60) {
      message = 'Good job! You have a solid understanding.';
    } else if (percentage >= 40) {
      message = 'Not bad, but there\'s room for improvement.';
    } else {
      message = 'You might want to study a bit more.';
    }

    resultContainer.innerHTML = `<p>${message}</p>`;
    nextButton.innerHTML = 'Restart';
    nextButton.style.display = 'block';
    nextButton.removeEventListener('click', handleNextButton);
    nextButton.addEventListener('click', startQuiz);
  }

  // Event listeners
  nextButton.addEventListener('click', handleNextButton);

  // Start the quiz
  startQuiz();
});

/* --- HTML STRUCTURE FOR QUIZ --- */
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Interactive Quiz</title>
  <link rel="stylesheet" href="quiz.css">
</head>
<body>
  <div class="quiz-container" id="quiz-container">
    <h1>Web Development Quiz</h1>
    <div id="question-container"></div>
    <div id="options-container"></div>
    <div id="result-container"></div>
    <button id="next-button">Next</button>
  </div>
  <script src="quiz.js"></script>
</body>
</html>

/*===========================================================================
10. FETCHING DATA FROM AN API (AJAX/FETCH)
===========================================================================*/

/* --- VANILLA JS VERSION --- */
// File: weather-app.js
document.addEventListener('DOMContentLoaded', () => {
  const searchForm = document.getElementById('search-form');
  const cityInput = document.getElementById('city-input');
  const weatherContainer = document.getElementById('weather-container');
  const loadingIndicator = document.getElementById('loading-indicator');
  const errorContainer = document.getElementById('error-container');

  // API key (in a real app, this would be secured)
  const API_KEY = 'your_api_key_here';

  // Event listener for form submission
  searchForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const city = cityInput.value.trim();

    if (city) {
      fetchWeatherData(city);
    }
  });

  // Fetch weather data from API
  async function fetchWeatherData(city) {
    // Show loading indicator
    loadingIndicator.style.display = 'block';
    weatherContainer.style.display = 'none';
    errorContainer.style.display = 'none';

    try {
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`
      );

      if (!response.ok) {
        throw new Error('City not found');
      }

      const data = await response.json();
      displayWeatherData(data);
    } catch (error) {
      showError(error.message);
    } finally {
      loadingIndicator.style.display = 'none';
    }
  }

  // Display weather data
  function displayWeatherData(data) {
    const { name, main, weather, wind } = data;

    // Format weather data
    const temperature = Math.round(main.temp);
    const feelsLike = Math.round(main.feels_like);
    const weatherDescription = weather[0].description;
    const weatherIcon = weather[0].icon;
    const humidity = main.humidity;
    const windSpeed = Math.round(wind.speed);

    // Create HTML content
    const weatherHTML = `
      <h2>${name}</h2>
      <div class="weather-info">
        <img src="https://openweathermap.org/img/wn/${weatherIcon}@2x.png" alt="${weatherDescription}">
        <div class="temperature">${temperature}°C</div>
        <div class="description">${weatherDescription}</div>
      </div>
      <div class="weather-details">
        <div class="detail">
          <span class="label">Feels like:</span>
          <span class="value">${feelsLike}°C</span>
        </div>
        <div class="detail">
          <span class="label">Humidity:</span>
          <span class="value">${humidity}%</span>
        </div>
        <div class="detail">
          <span class="label">Wind:</span>
          <span class="value">${windSpeed} m/s</span>
        </div>
      </div>
    `;

    // Update UI
    weatherContainer.innerHTML = weatherHTML;
    weatherContainer.style.display = 'block';
  }

  // Show error message
  function showError(message) {
    errorContainer.textContent = `Error: ${message}`;
    errorContainer.style.display = 'block';
    weatherContainer.style.display = 'none';
  }
});

/* --- REACT VERSION --- */
// File: WeatherApp.jsx
import React, { useState } from 'react';
import './WeatherApp.css';

function WeatherApp() {
  const [city, setCity] = useState('');
  const [weather, setWeather] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // API key (in a real app, this would be secured)
  const API_KEY = 'your_api_key_here';

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!city.trim()) return;

    setLoading(true);
    setError(null);

    try {
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`
      );

      if (!response.ok) {
        throw new Error('City not found');
      }

      const data = await response.json();
      setWeather(data);
    } catch (error) {
      setError(error.message);
      setWeather(null);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="weather-app">
      <h1>Weather App</h1>

      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Enter city name"
          value={city}
          onChange={(e) => setCity(e.target.value)}
        />
        <button type="submit">Search</button>
      </form>

      {loading && <div className="loading">Loading...</div>}

      {error && <div className="error">Error: {error}</div>}

      {weather && (
        <div className="weather-container">
          <h2>{weather.name}</h2>
          <div className="weather-info">
            <img
              src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}
              alt={weather.weather[0].description}
            />
            <div className="temperature">{Math.round(weather.main.temp)}°C</div>
            <div className="description">{weather.weather[0].description}</div>
          </div>
          <div className="weather-details">
            <div className="detail">
              <span className="label">Feels like:</span>
              <span className="value">{Math.round(weather.main.feels_like)}°C</span>
            </div>
            <div className="detail">
              <span className="label">Humidity:</span>
              <span className="value">{weather.main.humidity}%</span>
            </div>
            <div className="detail">
              <span className="label">Wind:</span>
              <span className="value">{Math.round(weather.wind.speed)} m/s</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default WeatherApp;

/* --- END OF TEMPLATES --- */